---
const links = [
	{ href: '#inicio', text: 'Inicio' },
	{ href: '#tecnologias', text: 'Tecnologías' },
	{ href: '#experiencia', text: 'Experiencia' },
	{ href: '#proyectos', text: 'Proyectos' },
	{ href: '#formacion', text: 'Formación' },
];
---

<header
	class='fixed top-0 left-0 right-0 z-50 backdrop-blur-md bg-black/10 dark:bg-gray-950/70 border-b border-white/10 px-4'
>
	<div class='max-w-6xl mx-auto flex items-center justify-between h-16'>
		<!-- Logo o nombre -->
		<a
			href='#inicio'
			class='text-xl font-bold bg-gradient-to-r from-indigo-500 to-purple-500 text-transparent bg-clip-text hover:from-purple-500 hover:to-indigo-500 transition-all duration-300'
		>
			AndyGonzales<span class='hidden sm:inline'>.dev</span>
		</a>

		<!-- Menú de navegación desktop -->
		<nav class='hidden md:block'>
			<ul class='flex gap-8'>
				{
					links.map((link) => (
						<li>
							<a
								href={link.href}
								class='relative text-sm font-medium opacity-80 hover:opacity-100 py-2 after:absolute after:left-0 after:bottom-0 after:h-0.5 after:w-0 after:bg-gradient-to-r after:from-indigo-500 after:to-purple-500 hover:after:w-full after:transition-all after:duration-300'
							>
								{link.text}
							</a>
						</li>
					))
				}
			</ul>
		</nav>

		<!-- Botón de menú móvil -->
		<button
			id='menu-toggle'
			class='md:hidden flex flex-col justify-center items-center gap-1.5 p-2'
			aria-label='Menú'
		>
			<span class='block w-6 h-0.5 bg-white transition-all duration-300'
			></span>
			<span class='block w-6 h-0.5 bg-white transition-all duration-300'
			></span>
			<span class='block w-6 h-0.5 bg-white transition-all duration-300'
			></span>
		</button>
	</div>

	<!-- Menú móvil -->
	<div
		id='mobile-menu'
		class='md:hidden h-0 overflow-hidden transition-all duration-300 bg-gray-900/95 backdrop-blur-md'
	>
		<nav class='px-4 py-6'>
			<ul class='flex flex-col gap-6'>
				{
					links.map((link) => (
						<li>
							<a
								href={link.href}
								class='block text-lg font-medium opacity-80 hover:opacity-100 hover:translate-x-1 transition-all duration-200 ease-in-out mobile-nav-link'
							>
								{link.text}
							</a>
						</li>
					))
				}
			</ul>
		</nav>
	</div>
</header>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Utilizar selectores con comprobaciones de nulidad
		const header = document.querySelector('header') as HTMLElement | null;
		if (!header) return;

		const headerHeight = header.offsetHeight;
		const menuToggle = document.getElementById('menu-toggle');
		const mobileMenu = document.getElementById('mobile-menu');

		// Retornar temprano si no se encuentran los elementos esenciales
		if (!menuToggle || !mobileMenu) return;

		// Ya sabemos que mobileMenu no es null después de la comprobación anterior
		// TypeScript debería reconocer esto pero lo reforzamos con una declaración de tipo
		const safeMenuBars = menuToggle.querySelectorAll('span');

		// Función para abrir/cerrar el menú móvil con tipo explícito
		function toggleMobileMenu(open: boolean): void {
			// Aquí sabemos que mobileMenu no es null gracias a la comprobación anterior
			if (open) {
				mobileMenu?.classList.remove('h-0');
				mobileMenu?.classList.add('h-auto');

				// Comprobar existencia de menuBars antes de usarlo
				if (safeMenuBars && safeMenuBars.length >= 3) {
					safeMenuBars[0].classList.add('translate-y-2', 'rotate-45');
					safeMenuBars[1].classList.add('opacity-0');
					safeMenuBars[2].classList.add('-translate-y-2', '-rotate-45');
				}
			} else {
				mobileMenu?.classList.add('h-0');
				mobileMenu?.classList.remove('h-auto');

				// Comprobar existencia de menuBars antes de usarlo
				if (safeMenuBars && safeMenuBars.length >= 3) {
					safeMenuBars[0].classList.remove('translate-y-2', 'rotate-45');
					safeMenuBars[1].classList.remove('opacity-0');
					safeMenuBars[2].classList.remove('-translate-y-2', '-rotate-45');
				}
			}
		}

		// Toggle menu al hacer clic en el botón - Ahora sabemos que menuToggle y mobileMenu no son null
		menuToggle.addEventListener('click', () => {
			const isOpen = !mobileMenu.classList.contains('h-0');
			toggleMobileMenu(!isOpen);
		});

		// Función para manejar el scroll suave con offset para el header
		function smoothScrollToSection(e: Event): void {
			e.preventDefault();

			// Asegurar que el target sea un elemento
			const target = e.currentTarget as HTMLAnchorElement;
			if (!target) return;

			const href = target.getAttribute('href');

			if (href && href.startsWith('#')) {
				const targetSection = document.querySelector(href);
				if (targetSection) {
					const targetPosition =
						targetSection.getBoundingClientRect().top +
						window.scrollY -
						headerHeight -
						20;

					window.scrollTo({
						top: targetPosition,
						behavior: 'smooth',
					});

					// Si es menú móvil, cerrarlo (aquí sabemos que mobileMenu no es null)
					toggleMobileMenu(false);
				}
			}
		}

		// Aplicar scroll suave a todos los enlaces del menú
		const anchors = document.querySelectorAll('header a[href^="#"]');
		anchors.forEach((anchor) => {
			anchor.addEventListener('click', smoothScrollToSection);
		});

		// Efecto highlight en el enlace activo con margen superior ajustado
		const observerOptions = {
			rootMargin: `-${headerHeight + 5}px 0px -40% 0px`,
			threshold: 0.1,
		};

		const sections = document.querySelectorAll('section[id]');
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					const id = entry.target.getAttribute('id');
					if (!id) return;

					document.querySelectorAll('header nav a').forEach((link) => {
						if (link.getAttribute('href') === `#${id}`) {
							link.classList.add('active');
						} else {
							link.classList.remove('active');
						}
					});
				}
			});
		}, observerOptions);

		sections.forEach((section) => {
			observer.observe(section);
		});
	});
</script>

<style>
	.active {
		opacity: 1;
		position: relative;
	}

	.active::after {
		content: '';
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 2px;
		background: linear-gradient(to right, #6366f1, #a855f7);
	}

	/* Espaciado específico para secciones */
	section[id] {
		scroll-margin-top: 5rem; /* Valor superior al height del header */
	}
</style>
